<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    <!-- 自动注册action -->
    <context:component-scan base-package="net.jeeshop.web.action" />

    <!-- 在Spring MVC上下文中定义一个DefaultServletHttpRequestHandler，
	    它会像一个检查员，对进入DispatcherServlet的URL进行筛查，
	    如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
	    如果不是静态资源的请求，才由DispatcherServlet继续处理，即自定义的Servlet处理。 -->
    <mvc:default-servlet-handler/>
    
    <!-- 配置自定义转换服务器 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
    </bean>
    
    <!-- 启用注解驱动 -->
    <mvc:annotation-driven conversion-service="conversionService">
        <!-- 字符串转换器 -->
        <mvc:message-converters register-defaults="true">
            <bean id="messageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <bean id="jsonHttpMesaageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
        </mvc:message-converters>
        <!-- 集合参数解析器 -->
        <!--<mvc:argument-resolvers>-->
        <!--</mvc:argument-resolvers>-->
    </mvc:annotation-driven>
    
    <!-- 配置静态文件路径 -->
    <!-- max caching age: 24 h -->
    <mvc:resources mapping="/resource/**" location="/resource/" cache-period="86400"/>
    <mvc:resources mapping="/attached/**" location="/attached/" cache-period="86400"/>
    
    <!-- 拦截器 -->
    <!--<mvc:interceptors>-->
    <!--</mvc:interceptors>-->
    
    <!-- 配置国际化资源文件 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n/jeeshop" />
    </bean>
    
    <!-- 设置freeMarker配置文件路径 -->
    <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:freemarker.properties" />
    </bean>

    <!-- 配置freeMarker模板路径 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="freemarkerSettings" ref="freemarkerConfiguration" />
        <property name="templateLoaderPath" value="/" />
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 全局变量部分 -->
        <property name="freemarkerVariables">
            <map>
                <entry key="systemManager">
                    <bean class="net.jeeshop.core.freemarker.fn.SystemManagerGetter" />
                </entry>
                <entry key="systemSetting">
                    <bean class="net.jeeshop.core.freemarker.fn.SystemSettingGetter" />
                </entry>
                <entry key="currentUser">
                    <bean class="net.jeeshop.core.freemarker.fn.CurrentUserGetter" />
                </entry>
                <entry key="currentAccount">
                    <bean class="net.jeeshop.core.freemarker.fn.CurrentAccountGetter" />
                </entry>
                <entry key="checkPrivilege">
                    <bean class="net.jeeshop.core.freemarker.fn.PrivilegeChecker" />
                </entry>
                <entry key="i18nParser">
                    <bean class="net.jeeshop.core.freemarker.fn.I18N" />
                </entry>
                <entry key="keyValueParser">
                    <bean class="net.jeeshop.core.freemarker.fn.KeyValueGetter" />
                </entry>
                <entry key="shoppingCart">
                    <bean class="net.jeeshop.core.freemarker.fn.ShoppingCartGetter" />
                </entry>
            </map>
        </property>
    </bean>
    
    <!-- 基于SpringMVC的项目中有时需要同时使用多种视图格式，
    	如jsp,velocity及freemarker等，
    	可以在Spring WEB上下文中配置一种或多种解析策略，并指定他们之间的先后顺序。
    	或者通过不同的请求路径配置规则，映射到不同的视图文件。 -->
    
    <!-- UrlBasedViewResolver：它是对ViewResolver的一种简单实现，
	    而且继承了AbstractCachingViewResolver，
	    主要就是提供的一种拼接URL的方式来解析视图，
	    它可以让我们通过prefix属性指定一个指定的前缀，通过suffix属性指定一个指定的后缀，
	    然后把返回的逻辑视图名称加上指定的前缀和后缀就是指定的视图URL了。
	    如prefix=/WEB-INF/jsps/，suffix=.jsp，返回的视图名称viewName=test/indx，
	    则UrlBasedViewResolver解析出来的视图URL就是/WEB-INF/jsps/test/index.jsp。
	    默认的prefix和suffix都是空串。
	    URLBasedViewResolver支持返回的视图名称中包含redirect:前缀，
	    这样就可以支持URL在客户端的跳转，如当返回的视图名称是”redirect:test.do”的时候，
	    URLBasedViewResolver发现返回的视图名称包含”redirect:”前缀，
	    于是把返回的视图名称前缀”redirect:”去掉，取后面的test.do组成一个RedirectView，
	    RedirectView中将把请求返回的模型属性组合成查询参数的形式组合到redirect的URL后面，
	    然后调用HttpServletResponse对象的sendRedirect方法进行重定向。
	    同样，URLBasedViewResolver还支持forword:前缀，
	    对于视图名称中包含forword:前缀的视图名称将会被封装成一个InternalResourceView对象，
	    然后在服务器端利用RequestDispatcher的forword方式跳转到指定的地址。
	    使用UrlBasedViewResolver的时候必须指定属性viewClass，表示解析成哪种视图，
	    一般使用较多的是InternalResourceView，利用它来展现jsp，
	    但是当我们使用JSTL的时候我们必须使用JstlView。 -->
	    
	<!-- InternalResourceViewResolver继承了UrlBasedViewResolver，
	    而且它具有一个非常重要的特性，
	    我们知道，
	    为了保证系统的安全性，
	    需要把所有的静态内容放在webapp目录下。
	    把所有的动态内容(*.jsp)放在WEB-INF目录下的/jsp/目录下，
	    放在/WEB-INF/jsp/目录下的jsp是不能通过浏览器的url直接访问的。
	    只能通过mvc的controller（控制器）进行modelAndView的跳转。
	    
	    那么，跳转的过程是什么样的呢？
	    当返回的逻辑视图名称是test的时候，InternalResourceViewResolver会给它加上定义好的前缀和后缀，
	    组成“/WEB-INF/jsp/test.jsp”的形式，
	    然后把它当做一个InternalResourceView的url，并新建一个InternalResourceView对象返回。-->
    <!-- 配置jsp视图解析器-->
    <bean id="viewResolverCommon" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="order" value="1"/>
    </bean>
    
    <!-- FreeMarkerViewResolver继承自UrlBasedViewResolver。
		它会按照UrlBasedViewResolver拼接URL的方式进行视图路径的解析。
		但是使用FreeMarkerViewResolver的时候可以不指定其viewClass，
		因为FreeMarkerViewResolver中已经把viewClass定死为FreeMarkerView了。 -->
    <!-- 配置freeMarker视图解析器-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="net.jeeshop.core.freemarker.view.FreemarkerView"/>
        <property name="prefix" value="/"/>
        <property name="contentType" value="text/html; charset=utf-8" />
        <property name="requestContextAttribute" value="request" />
        <property name="suffix" value=".ftl" />
        
        <!-- 通过order属性指定解析器的优先顺序，order越小优先级越高，
        	SpringMVC会按视图解析器顺序的优先顺序对逻辑视图名进行解析，
        	直到解析成功并返回视图对象，否则抛出ServletException异常。 -->
        <property name="order" value="0"/>
    </bean>
    
    <!-- 配置解析JSON所需的解析器 -->
    <!--<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />-->
    
    <!-- 配置上传文件所需的解析器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
</beans>